// Wait for the DOM to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
    // Mobile menu toggle functionality
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (menuToggle && mobileMenu) {
        menuToggle.addEventListener('click', function() {
            mobileMenu.classList.toggle('show');
            document.body.classList.toggle('menu-open');
        });
    }

    // Password visibility toggle
    document.querySelectorAll('.toggle-password').forEach(function(toggle) {
        toggle.addEventListener('click', function() {
            const input = this.parentElement.querySelector('input');
            if (input) {
                const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                input.setAttribute('type', type);
                this.classList.toggle('fa-eye-slash');
            }
        });
    });

    // Close mobile menu when clicking on a link
    document.querySelectorAll('.nav a').forEach(function(link) {
        link.addEventListener('click', function() {
            if (mobileMenu) mobileMenu.classList.remove('show');
            document.body.classList.remove('menu-open');
        });
    });

    // Initialize dynamic player counts
    initPlayerCounts();
});

// Player count animation function
function initPlayerCounts() {
    const playerCounts = document.querySelectorAll('.players-count');
    
    if (!playerCounts.length) {
        console.log('No player count elements found');
        return;
    }

    playerCounts.forEach(function(countElement) {
        const min = parseInt(countElement.getAttribute('data-min')) || 100;
        const max = parseInt(countElement.getAttribute('data-max')) || 1000;
        let current = parseInt(countElement.getAttribute('data-current')) || min;
        const numberElement = countElement.querySelector('.player-number');
        
        if (!numberElement) {
            console.log('No .player-number element found');
            return;
        }

        // Set initial value
        numberElement.textContent = current;

        // Function to update the count
        function updateCount() {
            // Determine if we should increase or decrease (70% chance to increase)
            const shouldIncrease = Math.random() < 0.7;
            
            // Determine change amount (1-5 for small changes, 5-10 for larger changes)
            const changeAmount = Math.random() < 0.7 ? 
                Math.floor(Math.random() * 5) + 1 : 
                Math.floor(Math.random() * 6) + 5;
            
            // Apply the change
            if (shouldIncrease) {
                current = Math.min(max, current + changeAmount);
            } else {
                current = Math.max(min, current - changeAmount);
            }
            
            // Animate the change
            animateValue(numberElement, parseInt(numberElement.textContent), current, 1000);
            
            // Schedule next update (random between 2-5 seconds)
            setTimeout(updateCount, Math.random() * 3000 + 2000);
        }

        // Start the updates
        setTimeout(updateCount, Math.random() * 3000 + 2000);
    });
}

// Helper function to animate number changes smoothly
function animateValue(element, start, end, duration) {
    const startTime = performance.now();
    
    function updateValue(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        element.textContent = Math.floor(progress * (end - start) + start);
        
        if (progress < 1) {
            requestAnimationFrame(updateValue);
        }
    }
    
    requestAnimationFrame(updateValue);
}

// Initialize player counts immediately if DOM is already loaded
if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(initPlayerCounts, 100);
}




